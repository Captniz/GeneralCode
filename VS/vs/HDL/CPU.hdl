CHIP CPU {

    IN  inM[16],      // M value input  (M = contents of RAM[A])
        ins[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
        Not(in=ins[15], out=notI);
        Or(a=ins[15], b=ins[5], out=loadA);
        And(a=ins[15], b=ins[4], out=loadD);

        Mux16(a=inM, b=ins, sel=notI, out=inA);
        ARegister(in=inA, load=loadA, out=outA, out[0..14]=addressM); //A
        DRegister(in=inM, load=loadD, out=outD); //D

        Mux16(a=outA, b=inM, sel=ins[12], out=inALU);

        ALU(x=outD, y=inALU, zx=ins[11], nx=ins[10], zy=ins[9], ny=ins[8], f=ins[7], no=ins[6], out=OutM, zr=jzr, ng=jng);

        And(a=jzr, b=ins[1], out=jzr1);
        And(a=jng, b=ins[2], out=jng1);
        Or(a=jng1, b=jzr1, out=j1);

        Not(in=jng, out=njng);
        Not(in=jzr, out=njzr);
        And(a=njng, b=ins[0], out=njng1);
        And(a=njng1, b=njzr, out=j2);

        Or(a=j1, b=j2, out=j3);
        And(a=j3, b=ins[15], out=jfinal);
        Not(in=jfinal, out=njfinal);

        PC(in=outA, load=jfinal, inc=njfinal, reset=reset, out[0..14]=pc);

        And(a=ins[15], b=ins[3], out=writeM);
}